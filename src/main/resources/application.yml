server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter #GlobalFilter클래스 이름
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookies
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**

        #        - id: user-service
        #          uri: lb://USER-SERVICE
        #          predicates:
        #            - Path=/user-service/login
        #            - Method=POST
        #          filters:
        #            - RemoveRequestHeader=Cookies # remove요청이 되어 있는 header값을 삭제.. -> POST로 전달되는 데이터 값을 매번 새로운 데이터처럼 인식하기 위해서 request header값을 초기화
        #            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /user-service/{?<segment>.*}를 /$\{segment}로 변경
        #            # user-sevice에 요청되는 정보값을 filter적용하여 uri를 다시 작성해서 전달한다..
        #
        #        - id: user-service
        #          uri: lb://USER-SERVICE
        #          predicates:
        #            - Path=/user-service/login
        #            - Method=GET
        #          filters:
        #            - RemoveRequestHeader=Cookies
        #            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

        - id: first-service
          uri: lb://MY-FIRST-SERVICE # 마이크로 서비스 이름을 넣어주면 됨..
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - CustomFilter
            - name: LoggingFilter # 추가적인 파라미터를 넣고 싶다면 "name:"을 넣어야 한다.
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true